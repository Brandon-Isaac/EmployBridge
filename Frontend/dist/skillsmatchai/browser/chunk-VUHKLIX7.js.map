{
  "version": 3,
  "sources": ["src/app/admin/components/platform-analytics/platform-analytics.component.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\ninterface AnalyticsMetric {\r\n  name: string;\r\n  value: number;\r\n  change: number;\r\n  unit: string;\r\n  trend: 'up' | 'down' | 'stable';\r\n}\r\n\r\ninterface TimeRange {\r\n  value: string;\r\n  viewValue: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-platform-analytics',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n  ],\r\n  template: `\r\n    <div class=\"platform-analytics-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>Platform Analytics</mat-card-title>\r\n          <mat-form-field>\r\n            <mat-label>Time Range</mat-label>\r\n            <mat-select [(value)]=\"selectedTimeRange\">\r\n              <mat-option\r\n                *ngFor=\"let range of timeRanges\"\r\n                [value]=\"range.value\"\r\n              >\r\n                {{ range.viewValue }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <mat-grid-list cols=\"2\" rowHeight=\"200px\" gutterSize=\"16\">\r\n            <mat-grid-tile *ngFor=\"let metric of metrics\">\r\n              <mat-card class=\"metric-card\">\r\n                <mat-card-header>\r\n                  <mat-card-title>{{ metric.name }}</mat-card-title>\r\n                  <mat-card-subtitle>\r\n                    <mat-icon [class]=\"getTrendClass(metric.trend)\">\r\n                      {{ getTrendIcon(metric.trend) }}\r\n                    </mat-icon>\r\n                    {{ metric.change }}% change\r\n                  </mat-card-subtitle>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                  <div class=\"metric-value\">\r\n                    {{ metric.value }} {{ metric.unit }}\r\n                  </div>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </mat-grid-tile>\r\n          </mat-grid-list>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n          <button mat-button color=\"primary\" (click)=\"exportData()\">\r\n            <mat-icon>download</mat-icon>\r\n            Export Data\r\n          </button>\r\n          <button mat-button color=\"accent\" (click)=\"refreshData()\">\r\n            <mat-icon>refresh</mat-icon>\r\n            Refresh\r\n          </button>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      .platform-analytics-container {\r\n        padding: 20px;\r\n      }\r\n      .metric-card {\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n      .metric-value {\r\n        font-size: 2em;\r\n        font-weight: bold;\r\n        text-align: center;\r\n        margin-top: 20px;\r\n      }\r\n      .trend-up {\r\n        color: #4caf50;\r\n      }\r\n      .trend-down {\r\n        color: #f44336;\r\n      }\r\n      .trend-stable {\r\n        color: #2196f3;\r\n      }\r\n      mat-card-header {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class PlatformAnalyticsComponent implements OnInit {\r\n  selectedTimeRange = '7d';\r\n  timeRanges: TimeRange[] = [\r\n    { value: '24h', viewValue: 'Last 24 Hours' },\r\n    { value: '7d', viewValue: 'Last 7 Days' },\r\n    { value: '30d', viewValue: 'Last 30 Days' },\r\n    { value: '90d', viewValue: 'Last 90 Days' },\r\n  ];\r\n\r\n  metrics: AnalyticsMetric[] = [\r\n    {\r\n      name: 'Active Users',\r\n      value: 1250,\r\n      change: 12.5,\r\n      unit: 'users',\r\n      trend: 'up',\r\n    },\r\n    {\r\n      name: 'Job Postings',\r\n      value: 342,\r\n      change: -3.2,\r\n      unit: 'jobs',\r\n      trend: 'down',\r\n    },\r\n    {\r\n      name: 'Applications',\r\n      value: 1256,\r\n      change: 8.7,\r\n      unit: 'applications',\r\n      trend: 'up',\r\n    },\r\n    {\r\n      name: 'Matches Made',\r\n      value: 89,\r\n      change: 0,\r\n      unit: 'matches',\r\n      trend: 'stable',\r\n    },\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    // Load analytics data from backend\r\n  }\r\n\r\n  getTrendIcon(trend: string): string {\r\n    switch (trend) {\r\n      case 'up':\r\n        return 'trending_up';\r\n      case 'down':\r\n        return 'trending_down';\r\n      default:\r\n        return 'trending_flat';\r\n    }\r\n  }\r\n\r\n  getTrendClass(trend: string): string {\r\n    return `trend-${trend}`;\r\n  }\r\n\r\n  exportData(): void {\r\n    console.log('Export analytics data');\r\n    // Implement export functionality\r\n  }\r\n\r\n  refreshData(): void {\r\n    console.log('Refresh analytics data');\r\n    // Implement refresh functionality\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
