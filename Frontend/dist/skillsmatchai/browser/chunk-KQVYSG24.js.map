{
  "version": 3,
  "sources": ["src/app/admin/components/ai-model-management/ai-model-management.component.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\ninterface AIModel {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  status: string;\r\n  trainingProgress: number;\r\n  accuracy: number;\r\n  precision: number;\r\n  recall: number;\r\n  features: string[];\r\n  lastUpdated: Date;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-ai-model-management',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatChipsModule,\r\n    MatProgressBarModule,\r\n    MatTooltipModule,\r\n    MatDialogModule,\r\n  ],\r\n  template: `\r\n    <div class=\"ai-model-management-container\">\r\n      <h2>AI Model Management</h2>\r\n      <div class=\"model-list\">\r\n        <mat-card *ngFor=\"let model of models\" class=\"model-card\">\r\n          <mat-card-header>\r\n            <mat-card-title>{{ model.name }}</mat-card-title>\r\n            <mat-card-subtitle>{{ model.type }}</mat-card-subtitle>\r\n          </mat-card-header>\r\n          <mat-card-content>\r\n            <div class=\"model-status\">\r\n              <span>Status: {{ model.status }}</span>\r\n              <mat-progress-bar\r\n                [mode]=\"'determinate'\"\r\n                [value]=\"model.trainingProgress\"\r\n              >\r\n              </mat-progress-bar>\r\n            </div>\r\n            <div class=\"model-metrics\">\r\n              <div class=\"metric\">\r\n                <span>Accuracy: {{ model.accuracy }}%</span>\r\n              </div>\r\n              <div class=\"metric\">\r\n                <span>Precision: {{ model.precision }}%</span>\r\n              </div>\r\n              <div class=\"metric\">\r\n                <span>Recall: {{ model.recall }}%</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"model-features\">\r\n              <mat-chip-set>\r\n                <mat-chip *ngFor=\"let feature of model.features\">\r\n                  {{ feature }}\r\n                </mat-chip>\r\n              </mat-chip-set>\r\n            </div>\r\n            <div class=\"last-updated\">\r\n              Last Updated: {{ model.lastUpdated | date }}\r\n            </div>\r\n          </mat-card-content>\r\n          <mat-card-actions>\r\n            <button mat-button color=\"primary\" (click)=\"retrainModel(model)\">\r\n              Train\r\n            </button>\r\n            <button mat-button color=\"accent\" (click)=\"deployModel(model)\">\r\n              Deploy\r\n            </button>\r\n            <button mat-button color=\"warn\" (click)=\"deleteModel(model)\">\r\n              Delete\r\n            </button>\r\n          </mat-card-actions>\r\n        </mat-card>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      .ai-model-management-container {\r\n        padding: 20px;\r\n      }\r\n      .model-list {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n        gap: 20px;\r\n        margin-top: 20px;\r\n      }\r\n      .model-card {\r\n        height: 100%;\r\n      }\r\n      .model-status {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 10px;\r\n      }\r\n      .model-metrics {\r\n        margin: 10px 0;\r\n      }\r\n      .model-features {\r\n        margin-top: 10px;\r\n      }\r\n      mat-card-actions {\r\n        display: flex;\r\n        justify-content: space-between;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class AIModelManagementComponent implements OnInit {\r\n  models: AIModel[] = [\r\n    {\r\n      id: '1',\r\n      name: 'Job Matching Model',\r\n      type: 'Recommendation',\r\n      status: 'Active',\r\n      trainingProgress: 100,\r\n      accuracy: 92.5,\r\n      precision: 89.3,\r\n      recall: 91.8,\r\n      features: ['Skills', 'Experience', 'Education', 'Location'],\r\n      lastUpdated: new Date('2024-03-15'),\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Resume Analysis Model',\r\n      type: 'NLP',\r\n      status: 'Training',\r\n      trainingProgress: 75,\r\n      accuracy: 88.3,\r\n      precision: 85.7,\r\n      recall: 87.2,\r\n      features: ['Text Analysis', 'Keyword Extraction', 'Format Detection'],\r\n      lastUpdated: new Date('2024-03-10'),\r\n    },\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  retrainModel(model: AIModel): void {\r\n    console.log('Retraining model:', model);\r\n    // Implement retrain functionality\r\n  }\r\n\r\n  deployModel(model: AIModel): void {\r\n    console.log('Deploying model:', model);\r\n    // Implement deploy functionality\r\n  }\r\n\r\n  deleteModel(model: AIModel): void {\r\n    console.log('Deleting model:', model);\r\n    // Implement delete functionality\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
