{
  "version": 3,
  "sources": ["src/app/services/application.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport enum ApplicationStatus {\r\n  PENDING = 'PENDING',\r\n  REVIEWED = 'REVIEWED',\r\n  INTERVIEW = 'INTERVIEW',\r\n  ACCEPTED = 'ACCEPTED',\r\n  REJECTED = 'REJECTED'\r\n}\r\n\r\nexport interface Application {\r\n  id: string;\r\n  jobId: string;\r\n  userId: string;\r\n  coverLetter: string;\r\n  status: string;\r\n  appliedAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface CreateApplicationData {\r\n  jobId: string;\r\n  coverLetter: string;\r\n}\r\n\r\nexport interface UpdateApplicationStatusData {\r\n  status: ApplicationStatus;\r\n  interviewDate?: Date;\r\n}\r\n\r\nexport interface Interview {\r\n  id: string;\r\n  applicationId: string;\r\n  jobTitle: string;\r\n  companyName: string;\r\n  scheduledTime: Date;\r\n  status: 'pending' | 'accepted' | 'rejected';\r\n  location?: string;\r\n  notes?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApplicationService {\r\n  private apiUrl = `${environment.apiUrl}/applications`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createApplication(data: CreateApplicationData): Observable<Application> {\r\n    return this.http.post<Application>(this.apiUrl, data);\r\n  }\r\n\r\n  getUserApplications(userId: string): Observable<Application[]> {\r\n    return this.http.get<Application[]>(`${this.apiUrl}/user/${userId}`);\r\n  }\r\n\r\n  getApplication(id: string): Observable<Application> {\r\n    return this.http.get<Application>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  updateApplicationStatus(id: string, status: string): Observable<Application> {\r\n    return this.http.patch<Application>(`${this.apiUrl}/${id}/status`, { status });\r\n  }\r\n\r\n  // Get all applications for a job\r\n  getJobApplications(jobId: string): Observable<Application[]> {\r\n    return this.http.get<Application[]>(`${this.apiUrl}/job/${jobId}`);\r\n  }\r\n\r\n  // Get application match score\r\n  getApplicationMatchScore(id: string): Observable<{ matchScore: number }> {\r\n    return this.http.get<{ matchScore: number }>(`${this.apiUrl}/${id}/match-score`);\r\n  }\r\n\r\n  // Helper method to format match score\r\n  formatMatchScore(score: number): string {\r\n    return `${score.toFixed(1)}%`;\r\n  }\r\n\r\n  // Helper method to format date\r\n  formatDate(date: Date): string {\r\n    return new Date(date).toLocaleDateString();\r\n  }\r\n\r\n  // Helper method to check if application is in interview stage\r\n  isInterviewStage(status: ApplicationStatus): boolean {\r\n    return status === ApplicationStatus.INTERVIEW;\r\n  }\r\n\r\n  // Helper method to check if application is accepted\r\n  isAccepted(status: ApplicationStatus): boolean {\r\n    return status === ApplicationStatus.ACCEPTED;\r\n  }\r\n\r\n  // Helper method to check if application is rejected\r\n  isRejected(status: ApplicationStatus): boolean {\r\n    return status === ApplicationStatus.REJECTED;\r\n  }\r\n\r\n  // Helper method to get status color for UI\r\n  getStatusColor(status: ApplicationStatus): string {\r\n    switch (status) {\r\n      case ApplicationStatus.ACCEPTED:\r\n        return 'success';\r\n      case ApplicationStatus.REJECTED:\r\n        return 'danger';\r\n      case ApplicationStatus.INTERVIEW:\r\n        return 'warning';\r\n      case ApplicationStatus.REVIEWED:\r\n        return 'info';\r\n      default:\r\n        return 'secondary';\r\n    }\r\n  }\r\n\r\n  getUserInterviews(userId: string): Observable<Interview[]> {\r\n    return this.http.get<Interview[]>(`${this.apiUrl}/interviews/${userId}`);\r\n  }\r\n\r\n  respondToInterview(interviewId: string, response: 'accepted' | 'rejected'): Observable<void> {\r\n    return this.http.post<void>(`${this.apiUrl}/interviews/${interviewId}/respond`, { response });\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;;;AAKA,IAAY;CAAZ,SAAYA,oBAAiB;AAC3B,EAAAA,mBAAA,SAAA,IAAA;AACA,EAAAA,mBAAA,UAAA,IAAA;AACA,EAAAA,mBAAA,WAAA,IAAA;AACA,EAAAA,mBAAA,UAAA,IAAA;AACA,EAAAA,mBAAA,UAAA,IAAA;AACF,GANY,sBAAA,oBAAiB,CAAA,EAAA;AA0CvB,IAAO,qBAAP,MAAO,oBAAkB;EAGT;EAFZ,SAAS,GAAG,YAAY,MAAM;EAEtC,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAEvC,kBAAkB,MAA2B;AAC3C,WAAO,KAAK,KAAK,KAAkB,KAAK,QAAQ,IAAI;EACtD;EAEA,oBAAoB,QAAc;AAChC,WAAO,KAAK,KAAK,IAAmB,GAAG,KAAK,MAAM,SAAS,MAAM,EAAE;EACrE;EAEA,eAAe,IAAU;AACvB,WAAO,KAAK,KAAK,IAAiB,GAAG,KAAK,MAAM,IAAI,EAAE,EAAE;EAC1D;EAEA,wBAAwB,IAAY,QAAc;AAChD,WAAO,KAAK,KAAK,MAAmB,GAAG,KAAK,MAAM,IAAI,EAAE,WAAW,EAAE,OAAM,CAAE;EAC/E;;EAGA,mBAAmB,OAAa;AAC9B,WAAO,KAAK,KAAK,IAAmB,GAAG,KAAK,MAAM,QAAQ,KAAK,EAAE;EACnE;;EAGA,yBAAyB,IAAU;AACjC,WAAO,KAAK,KAAK,IAA4B,GAAG,KAAK,MAAM,IAAI,EAAE,cAAc;EACjF;;EAGA,iBAAiB,OAAa;AAC5B,WAAO,GAAG,MAAM,QAAQ,CAAC,CAAC;EAC5B;;EAGA,WAAW,MAAU;AACnB,WAAO,IAAI,KAAK,IAAI,EAAE,mBAAkB;EAC1C;;EAGA,iBAAiB,QAAyB;AACxC,WAAO,WAAW,kBAAkB;EACtC;;EAGA,WAAW,QAAyB;AAClC,WAAO,WAAW,kBAAkB;EACtC;;EAGA,WAAW,QAAyB;AAClC,WAAO,WAAW,kBAAkB;EACtC;;EAGA,eAAe,QAAyB;AACtC,YAAQ,QAAQ;MACd,KAAK,kBAAkB;AACrB,eAAO;MACT,KAAK,kBAAkB;AACrB,eAAO;MACT,KAAK,kBAAkB;AACrB,eAAO;MACT,KAAK,kBAAkB;AACrB,eAAO;MACT;AACE,eAAO;IACX;EACF;EAEA,kBAAkB,QAAc;AAC9B,WAAO,KAAK,KAAK,IAAiB,GAAG,KAAK,MAAM,eAAe,MAAM,EAAE;EACzE;EAEA,mBAAmB,aAAqB,UAAiC;AACvE,WAAO,KAAK,KAAK,KAAW,GAAG,KAAK,MAAM,eAAe,WAAW,YAAY,EAAE,SAAQ,CAAE;EAC9F;;qCA9EW,qBAAkB,mBAAA,UAAA,CAAA;EAAA;4EAAlB,qBAAkB,SAAlB,oBAAkB,WAAA,YAFjB,OAAM,CAAA;;;sEAEP,oBAAkB,CAAA;UAH9B;WAAW;MACV,YAAY;KACb;;;",
  "names": ["ApplicationStatus"]
}
