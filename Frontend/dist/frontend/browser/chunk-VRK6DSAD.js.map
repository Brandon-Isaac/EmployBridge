{
  "version": 3,
  "sources": ["src/app/services/job.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Skill } from './skill.service';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface Job {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  location: string;\r\n  salary?: number;\r\n  employmentType: string;\r\n  deadline?: Date;\r\n  employer: {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n  requiredSkills: Skill[];\r\n  applications?: any[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface JobWithMatchScore extends Job {\r\n  matchScore: number;\r\n}\r\n\r\nexport interface JobSearchParams {\r\n  query?: string;\r\n  location?: string;\r\n  skills?: string[];\r\n  employmentType?: string;\r\n  sortBy?: string;\r\n  minSalary?: number;\r\n}\r\n\r\nexport interface JobGenerationParams {\r\n  title: string;\r\n  location: string;\r\n  employmentType: string;\r\n  salary?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JobService {\r\n  private apiUrl = `${environment.apiUrl}/jobs`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Get all jobs\r\n  getAllJobs(): Observable<Job[]> {\r\n    return this.http.get<Job[]>(this.apiUrl);\r\n  }\r\n\r\n  // Get job by ID\r\n  getJobById(id: string): Observable<Job> {\r\n    return this.http.get<Job>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  // Create new job\r\n  createJob(job: Partial<Job>): Observable<Job> {\r\n    return this.http.post<Job>(this.apiUrl, job);\r\n  }\r\n\r\n  // Update job\r\n  updateJob(id: string, job: Partial<Job>): Observable<Job> {\r\n    return this.http.put<Job>(`${this.apiUrl}/${id}`, job);\r\n  }\r\n\r\n  // Delete job\r\n  deleteJob(id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  // Get jobs by employer\r\n  getJobsByEmployer(employerId: string): Observable<Job[]> {\r\n    return this.http.get<Job[]>(`${this.apiUrl}/employer/${employerId}`);\r\n  }\r\n\r\n  // Search jobs\r\n  searchJobs(params: JobSearchParams): Observable<Job[]> {\r\n    const queryParams = new URLSearchParams();\r\n    if (params.query) queryParams.set('query', params.query);\r\n    if (params.location) queryParams.set('location', params.location);\r\n    if (params.skills?.length) queryParams.set('skills', params.skills.join(','));\r\n    if (params.employmentType) queryParams.set('employmentType', params.employmentType);\r\n    if (params.sortBy) queryParams.set('sortBy', params.sortBy);\r\n    if (params.minSalary) queryParams.set('minSalary', params.minSalary.toString());\r\n\r\n    return this.http.get<Job[]>(`${this.apiUrl}/search?${queryParams.toString()}`);\r\n  }\r\n\r\n  // Get recommended jobs for the current user\r\n  getRecommendedJobs(): Observable<JobWithMatchScore[]> {\r\n    return this.http.get<JobWithMatchScore[]>(`${this.apiUrl}/recommended`);\r\n  }\r\n\r\n  // Generate job with AI\r\n  generateJobWithAI(params: JobGenerationParams): Observable<{\r\n    job: Job;\r\n    generatedSkills: Skill[];\r\n    message: string;\r\n  }> {\r\n    return this.http.post<{\r\n      job: Job;\r\n      generatedSkills: Skill[];\r\n      message: string;\r\n    }>(`${this.apiUrl}/generate`, params);\r\n  }\r\n\r\n  getJobs(): Observable<Job[]> {\r\n    return this.http.get<Job[]>(this.apiUrl);\r\n  }\r\n\r\n  getJob(id: string): Observable<Job> {\r\n    return this.http.get<Job>(`${this.apiUrl}/${id}`);\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;;;AAgDM,IAAO,aAAP,MAAO,YAAU;EAGD;EAFZ,SAAS,GAAG,YAAY,MAAM;EAEtC,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAoB;;EAGxC,aAAU;AACR,WAAO,KAAK,KAAK,IAAW,KAAK,MAAM;EACzC;;EAGA,WAAW,IAAU;AACnB,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,IAAI,EAAE,EAAE;EAClD;;EAGA,UAAU,KAAiB;AACzB,WAAO,KAAK,KAAK,KAAU,KAAK,QAAQ,GAAG;EAC7C;;EAGA,UAAU,IAAY,KAAiB;AACrC,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,GAAG;EACvD;;EAGA,UAAU,IAAU;AAClB,WAAO,KAAK,KAAK,OAAO,GAAG,KAAK,MAAM,IAAI,EAAE,EAAE;EAChD;;EAGA,kBAAkB,YAAkB;AAClC,WAAO,KAAK,KAAK,IAAW,GAAG,KAAK,MAAM,aAAa,UAAU,EAAE;EACrE;;EAGA,WAAW,QAAuB;AAChC,UAAM,cAAc,IAAI,gBAAe;AACvC,QAAI,OAAO;AAAO,kBAAY,IAAI,SAAS,OAAO,KAAK;AACvD,QAAI,OAAO;AAAU,kBAAY,IAAI,YAAY,OAAO,QAAQ;AAChE,QAAI,OAAO,QAAQ;AAAQ,kBAAY,IAAI,UAAU,OAAO,OAAO,KAAK,GAAG,CAAC;AAC5E,QAAI,OAAO;AAAgB,kBAAY,IAAI,kBAAkB,OAAO,cAAc;AAClF,QAAI,OAAO;AAAQ,kBAAY,IAAI,UAAU,OAAO,MAAM;AAC1D,QAAI,OAAO;AAAW,kBAAY,IAAI,aAAa,OAAO,UAAU,SAAQ,CAAE;AAE9E,WAAO,KAAK,KAAK,IAAW,GAAG,KAAK,MAAM,WAAW,YAAY,SAAQ,CAAE,EAAE;EAC/E;;EAGA,qBAAkB;AAChB,WAAO,KAAK,KAAK,IAAyB,GAAG,KAAK,MAAM,cAAc;EACxE;;EAGA,kBAAkB,QAA2B;AAK3C,WAAO,KAAK,KAAK,KAId,GAAG,KAAK,MAAM,aAAa,MAAM;EACtC;EAEA,UAAO;AACL,WAAO,KAAK,KAAK,IAAW,KAAK,MAAM;EACzC;EAEA,OAAO,IAAU;AACf,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,IAAI,EAAE,EAAE;EAClD;;qCAxEW,aAAU,mBAAA,UAAA,CAAA;EAAA;4EAAV,aAAU,SAAV,YAAU,WAAA,YAFT,OAAM,CAAA;;;sEAEP,YAAU,CAAA;UAHtB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
