{
  "version": 3,
  "sources": ["src/app/services/chatbot.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ChatMessage {\r\n  id: string;\r\n  content: string;\r\n  isFromUser: boolean;\r\n  timestamp: Date;\r\n  userId: string;\r\n}\r\n\r\nexport interface ChatResponse {\r\n  response: string;\r\n  context: {\r\n    role: 'job_seeker' | 'employer';\r\n    name: string;\r\n    skills?: string[];\r\n    applicationCount?: number;\r\n    company?: string;\r\n    jobCount?: number;\r\n  };\r\n}\r\n\r\nexport interface CandidateQueryResponse {\r\n  summary: string;\r\n  candidates: {\r\n    id: string;\r\n    name: string;\r\n    skills: string[];\r\n    experienceCount: number;\r\n    education: string[];\r\n  }[];\r\n  filters: {\r\n    skills?: string[];\r\n    minExperience?: number;\r\n    educationLevel?: string;\r\n    location?: string;\r\n  };\r\n}\r\n\r\nexport interface JobQueryResponse {\r\n  summary: string;\r\n  jobs: {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    location: string;\r\n    employmentType: string;\r\n    requiredSkills: string[];\r\n    matchScore: number;\r\n  }[];\r\n  filters: {\r\n    skills?: string[];\r\n    jobTitle?: string;\r\n    location?: string;\r\n    employmentType?: string;\r\n    experienceLevel?: string;\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatbotService {\r\n  private apiUrl = 'http://localhost:3000/api/chatbot';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Send message to chatbot\r\n  sendMessage(message: string): Observable<ChatResponse> {\r\n    return this.http.post<ChatResponse>(`${this.apiUrl}/chat`, { message });\r\n  }\r\n\r\n  // Get chat history\r\n  getChatHistory(limit: number = 20): Observable<ChatMessage[]> {\r\n    return this.http.get<ChatMessage[]>(`${this.apiUrl}/history`, {\r\n      params: { limit: limit.toString() }\r\n    });\r\n  }\r\n\r\n  // Query candidates (for employers)\r\n  queryCandidates(query: string): Observable<CandidateQueryResponse> {\r\n    return this.http.post<CandidateQueryResponse>(`${this.apiUrl}/query/candidates`, { query });\r\n  }\r\n\r\n  // Query jobs (for job seekers)\r\n  queryJobs(query: string): Observable<JobQueryResponse> {\r\n    return this.http.post<JobQueryResponse>(`${this.apiUrl}/query/jobs`, { query });\r\n  }\r\n\r\n  // Helper method to format chat messages for display\r\n  formatMessage(message: ChatMessage): string {\r\n    return message.content;\r\n  }\r\n\r\n  // Helper method to check if message is from user\r\n  isUserMessage(message: ChatMessage): boolean {\r\n    return message.isFromUser;\r\n  }\r\n\r\n  // Helper method to format timestamp\r\n  formatTimestamp(timestamp: Date): string {\r\n    return new Date(timestamp).toLocaleString();\r\n  }\r\n\r\n  // Helper method to calculate match score percentage\r\n  formatMatchScore(score: number): string {\r\n    return `${score}%`;\r\n  }\r\n\r\n  // Clear chat history\r\n  clearHistory(): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/history`);\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;AAgEM,IAAO,iBAAP,MAAO,gBAAc;EAGL;EAFZ,SAAS;EAEjB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAoB;;EAGxC,YAAY,SAAe;AACzB,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,SAAS,EAAE,QAAO,CAAE;EACxE;;EAGA,eAAe,QAAgB,IAAE;AAC/B,WAAO,KAAK,KAAK,IAAmB,GAAG,KAAK,MAAM,YAAY;MAC5D,QAAQ,EAAE,OAAO,MAAM,SAAQ,EAAE;KAClC;EACH;;EAGA,gBAAgB,OAAa;AAC3B,WAAO,KAAK,KAAK,KAA6B,GAAG,KAAK,MAAM,qBAAqB,EAAE,MAAK,CAAE;EAC5F;;EAGA,UAAU,OAAa;AACrB,WAAO,KAAK,KAAK,KAAuB,GAAG,KAAK,MAAM,eAAe,EAAE,MAAK,CAAE;EAChF;;EAGA,cAAc,SAAoB;AAChC,WAAO,QAAQ;EACjB;;EAGA,cAAc,SAAoB;AAChC,WAAO,QAAQ;EACjB;;EAGA,gBAAgB,WAAe;AAC7B,WAAO,IAAI,KAAK,SAAS,EAAE,eAAc;EAC3C;;EAGA,iBAAiB,OAAa;AAC5B,WAAO,GAAG,KAAK;EACjB;;EAGA,eAAY;AACV,WAAO,KAAK,KAAK,OAAO,GAAG,KAAK,MAAM,UAAU;EAClD;;qCAlDW,iBAAc,mBAAA,UAAA,CAAA;EAAA;4EAAd,iBAAc,SAAd,gBAAc,WAAA,YAFb,OAAM,CAAA;;;sEAEP,gBAAc,CAAA;UAH1B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
