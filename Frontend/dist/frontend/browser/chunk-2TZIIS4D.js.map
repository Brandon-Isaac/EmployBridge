{
  "version": 3,
  "sources": ["src/app/services/company.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface Company {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    industry: string;\r\n    location: string;\r\n    website?: string;\r\n    logo?: string;\r\n    employeeCount: number;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n}\r\n\r\nexport interface CompanyProfile {\r\n    company: {\r\n        name: string;\r\n        description: string;\r\n        industry: string;\r\n        location: string;\r\n        website?: string;\r\n        logo?: string;\r\n        employeeCount: number;\r\n        employees: any[];\r\n    };\r\n    jobs: any[];\r\n}\r\n\r\nexport interface CreateCompanyData {\r\n    name: string;\r\n    description: string;\r\n    industry: string;\r\n    location: string;\r\n    website?: string;\r\n    logo?: string;\r\n}\r\n\r\nexport interface UpdateCompanyData {\r\n    name?: string;\r\n    description?: string;\r\n    industry?: string;\r\n    location?: string;\r\n    website?: string;\r\n    logo?: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CompanyService {\r\n    private apiUrl = `${environment.apiUrl}/companies`;\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    createCompany(data: CreateCompanyData): Observable<Company> {\r\n        return this.http.post<Company>(this.apiUrl, data);\r\n    }\r\n\r\n    updateCompany(id: string, data: UpdateCompanyData): Observable<Company> {\r\n        return this.http.put<Company>(`${this.apiUrl}/${id}`, data);\r\n    }\r\n\r\n    deleteCompany(id: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n    getCompanyById(id: string): Observable<Company> {\r\n        return this.http.get<Company>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n    getCompanyEmployees(id: string): Observable<{ employeeCount: number; employees: any[] }> {\r\n        return this.http.get<{ employeeCount: number; employees: any[] }>(`${this.apiUrl}/${id}/employees`);\r\n    }\r\n\r\n    getCompanyJobs(id: string): Observable<{ jobCount: number; jobs: any[] }> {\r\n        return this.http.get<{ jobCount: number; jobs: any[] }>(`${this.apiUrl}/${id}/jobs`);\r\n    }\r\n\r\n    deleteJob(jobId: string): Observable<void> {\r\n        return this.http.delete<void>(`${this.apiUrl}/jobs/${jobId}`);\r\n    }\r\n\r\n    getCompanyProfile(id: string): Observable<CompanyProfile> {\r\n        return this.http.get<CompanyProfile>(`${this.apiUrl}/${id}/profile`);\r\n    }\r\n\r\n    getCompanyByUserId(userId: string): Observable<Company> {\r\n        return this.http.get<Company>(`${this.apiUrl}/user/${userId}`);\r\n    }\r\n\r\n    // Helper method to format date\r\n    formatDate(date: Date): string {\r\n        return new Date(date).toLocaleDateString();\r\n    }\r\n\r\n    // Helper method to get industry icon\r\n    getIndustryIcon(industry: string): string {\r\n        const icons: { [key: string]: string } = {\r\n            'Technology': 'computer',\r\n            'Healthcare': 'local_hospital',\r\n            'Finance': 'account_balance',\r\n            'Education': 'school',\r\n            'Manufacturing': 'factory',\r\n            'Retail': 'store',\r\n            'Other': 'business'\r\n        };\r\n        return icons[industry] || icons['Other'];\r\n    }\r\n} "],
  "mappings": ";;;;;;;;;;;;AAqDM,IAAO,iBAAP,MAAO,gBAAc;EAGH;EAFZ,SAAS,GAAG,YAAY,MAAM;EAEtC,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAEvC,cAAc,MAAuB;AACjC,WAAO,KAAK,KAAK,KAAc,KAAK,QAAQ,IAAI;EACpD;EAEA,cAAc,IAAY,MAAuB;AAC7C,WAAO,KAAK,KAAK,IAAa,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,IAAI;EAC9D;EAEA,cAAc,IAAU;AACpB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,MAAM,IAAI,EAAE,EAAE;EACxD;EAEA,eAAe,IAAU;AACrB,WAAO,KAAK,KAAK,IAAa,GAAG,KAAK,MAAM,IAAI,EAAE,EAAE;EACxD;EAEA,oBAAoB,IAAU;AAC1B,WAAO,KAAK,KAAK,IAAiD,GAAG,KAAK,MAAM,IAAI,EAAE,YAAY;EACtG;EAEA,eAAe,IAAU;AACrB,WAAO,KAAK,KAAK,IAAuC,GAAG,KAAK,MAAM,IAAI,EAAE,OAAO;EACvF;EAEA,UAAU,OAAa;AACnB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,MAAM,SAAS,KAAK,EAAE;EAChE;EAEA,kBAAkB,IAAU;AACxB,WAAO,KAAK,KAAK,IAAoB,GAAG,KAAK,MAAM,IAAI,EAAE,UAAU;EACvE;EAEA,mBAAmB,QAAc;AAC7B,WAAO,KAAK,KAAK,IAAa,GAAG,KAAK,MAAM,SAAS,MAAM,EAAE;EACjE;;EAGA,WAAW,MAAU;AACjB,WAAO,IAAI,KAAK,IAAI,EAAE,mBAAkB;EAC5C;;EAGA,gBAAgB,UAAgB;AAC5B,UAAM,QAAmC;MACrC,cAAc;MACd,cAAc;MACd,WAAW;MACX,aAAa;MACb,iBAAiB;MACjB,UAAU;MACV,SAAS;;AAEb,WAAO,MAAM,QAAQ,KAAK,MAAM,OAAO;EAC3C;;qCA1DS,iBAAc,mBAAA,UAAA,CAAA;EAAA;4EAAd,iBAAc,SAAd,gBAAc,WAAA,YAFX,OAAM,CAAA;;;sEAET,gBAAc,CAAA;UAH1B;WAAW;MACR,YAAY;KACf;;;",
  "names": []
}
